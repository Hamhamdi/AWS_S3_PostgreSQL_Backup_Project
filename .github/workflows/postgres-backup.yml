- name: Create backup and upload to S3
  env:
    DB_HOST: ${{ secrets.DB_HOST }}
    DB_PORT: ${{ secrets.DB_PORT }}
    DB_NAME: ${{ secrets.DB_NAME }}
    DB_USER: ${{ secrets.DB_USER }}
    DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    S3_BUCKET: ${{ secrets.S3_BUCKET }}
  run: |
    set -e  # Stop on error
    echo "Starting PostgreSQL backup..."

    # Verify values are not empty
    echo "DB_HOST=$DB_HOST"
    echo "DB_PORT=$DB_PORT"
    echo "DB_NAME=$DB_NAME"
    echo "DB_USER=$DB_USER"

    if [ -z "$DB_PASSWORD" ]; then
      echo " DB_PASSWORD is empty!"
      exit 1
    fi

    BACKUP_DIR="/tmp/db_backups"
    mkdir -p $BACKUP_DIR

    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_FILE="$BACKUP_DIR/postgres_backup_$TIMESTAMP.sql"
    COMPRESSED_BACKUP_FILE="$BACKUP_FILE.tar.gz"

    # Create PostgreSQL dump with password passed securely via env var
    PGPASSWORD="$DB_PASSWORD" pg_dump -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -F p -f "$BACKUP_FILE"

    tar -czf "$COMPRESSED_BACKUP_FILE" "$BACKUP_FILE"
    echo "Backup compressed: $COMPRESSED_BACKUP_FILE"

    echo "Uploading to S3..."
    aws s3 cp "$COMPRESSED_BACKUP_FILE" "s3://$S3_BUCKET/backups/postgres_backup_$TIMESTAMP.tar.gz"

    echo "Backup uploaded to S3 successfully."
